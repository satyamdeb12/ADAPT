--------------------------------------Assignment 1 --------------------------------------

1. Create a directory ‘project_dir’ & cd to ‘project_dir’.
=> mkdir project_dir
   cd project_dir/
2. Initialize git version database. (git init)
=> git init
3. Create a new file index.html.
=> touch index.html
4. Check the git status. You should find index.html as untracked file.
=> git status
5. Stage the index.html file.
=> git add index.html
6. Commit index.html
=> git commit -m "Created index.html"
7. Make few changes in index.html & create a new file info.txt file.
=> touch info.txt
8. Check git status. You should find index.html & info.txt as untracked files.
=> git status
9. Configure GIT to ignore all txt files.
=> touch .gitignore
=> add the following line to the .gitnore file- "*.txt"
10. Again check the git status. You should find only index.html as untracked file.
=> git status
11. State & commit index.html
=> git add index.html
=> git commit -m "Added emmet abbreviation to index.html and added all .txt files to gitignore"
12. Log all your comments so far.
=> git log
13. Make some changes in index.html.
=> Added Header H1
14. Revert the change made in the previous step using git command.
=> git checkout -- .
=> since the changes were not commited the above command reverted the changes back to the previous commit
15. Again change index.html.
=> Added a paragraph
16. Stage index.html
=> git add index.html
17. Revert back the last stage.
=> git rm --cached index.html
18. Rename ‘add’ command to ‘my-add’.
=> alias my-add='git add'
19. Using my_add command Stage index.html again & commit the changes.
=> my-add index.html
=> git commit -m "New change with error that has to be reverted"
20. Revert the last commit.
=> git revert HEAD


--------------------------------------Assignment 2: Section 1 --------------------------------------
21. First take a backup of your assignments & projects. This is required because due to incorrect GIT operation you may lose your files.
=> copy "WebApp" D:\ADAPT\GIT
22. Create an empty directory ‘Assignments’ & cd to ‘Assignments’.
=> mkdir Assignments
=> cd Assignments
=> git init
23. Create a file README.txt inside ‘Assignments’ & write few lines about the contents of ‘Assignments’ folder.
=> touch README.txt
24. Commit README.txt file.
=> git add README.txt
=> git commit -m "Added README file"
25. Now create a new branch ‘html-assignments’.
=> git branch html-assignments
26. Switch to ‘html-assignments’ branch.
=> git checkout html-assignments
27. Copy all HTML assignments inside ‘Assignments’ folder.
=> Done
28. Commit HTML assignments into ‘html-assignments’ branch.
=> git add index.html
=> git commit -m "Commiting index.html to the html-assignments branch"
29. Make minor changes into few files belonging to ‘html-assignments’ branch.
=> Made changes
30. Commit those changed files.
=> git add index.html
=> git commit -m "Made minor changed to index.html"
31. Switch to master branch.
=> git checkout master
32. Make minor changes into README.txt file & commit those changes into master.
=> Made changes
=> git add README.txt
=> git commit -m "Made changes in the readme file"
33. Again switch to ‘html-assignments’ branch.
=> git checkout html-assignments
34. Make minor changes into few files belonging to ‘html-assignments’ branch.
=> Made more changes
35. Commit those changes.
=> git add index.html
=> git commit -m "Made more changes"
36. Switch to master.
=> git checkout master
37. Merge ‘html-assignments’ branch into master. Confirm all html assignments are shown in master.
=> git merge html-assignments
=> git log --oneline
38. Finally delete the ‘html-assignments’ branch.
=> git branch -d html-assignments



--------------------------------------Assignment 2: Section 2 --------------------------------------
1. Create a new branch ‘css-assignments’.
=> git branch css-assignments
2. Switch to ‘css-assignments’ branch.
=>git checkout css-assignments
3. Copy all CSS assignments inside ‘Assignments’ folder.
=> Done
4. Commit CSS assignments into ‘css-assignments’ branch.
=> git add style.css
=> git commit -m "Commiting style.css to the css-assignments branch"
5. Make minor changes into README.txt file on line 1 belonging to ‘css-assignments’ branch.
=> made changes
6. Commit those changed files.
=> git add README.txt
=> git commit -m "Made changes to README.txt from css-assignments branch"
7. Switch to master branch.
=> git checkout master
8. Make minor changes into README.txt file on line 3 & commit those changes into
master.
=> made changes
=> git commit -am "Changes made to README"
9. Again switch to ‘css-assignments’ branch.
=>git checkout css-assignments
10. Make minor changes into few files belonging to ‘css-assignments’ branch.
=> Done
11. Commit those changes.
=> git commit -am "Changes made to style.css"
12. Switch to master.
=> git checkout master
13. Merge ‘css-assignments’ branch into master. Confirm all css assignments are shown in
master.
=> git merge css-assignments
=>This will give error, then open the file that creates conflict and then make changes in the file.
=> git commit -am "Conflicts resolved"
14. Finally delete the ‘css-assignments’ branch
=> git branch -d css-assignments


--------------------------------------Assignment 2: Section 3 --------------------------------------
1. Create a new branch ‘js-assignments’.
=> git branch js-assignments
2. Switch to ‘js-assignments’ branch.
=> git checkout js-assignments
3. Copy all JavaScript assignments inside ‘Assignments’ folder.
=> Done
4. Commit JavaScript assignments into ‘js-assignments’ branch.
=> git commit -am "New file script.js is added"
5. Make minor changes into README.txt file on line 1 belonging to ‘js-assignments’ branch.
=> Done
6. Commit those changed files.
=> git commit -am "made changes to the README file from js-assignments branch"
7. Switch to master branch.
=> git checkout master
8. Make minor changes into README.txt file on line 1 & commit those changes into
master.
=> DONE
=> git commit -am "More changes to README.txt from master branch"
9. Again switch to ‘js-assignments’ branch.
=> git checkout master
10. Make minor changes into few files belonging to ‘js-assignments’ branch.
=> DONE
11. Commit those changes.
=> git commit -am "Made more change  to the script.js file"
12. Switch to master.
=>git checkout master
13. Merge ‘js-assignments’ branch into master. Confirm all JavaScript assignments are
shown in master.
=> git merge js-assignments
=>This will give error, then open the file that creates conflict and then make changes in the file.
=> git commit -am "Conflicts resolved"
14. Finally delete the ‘js-assignments’ branch.
=> git branch -d js-assignments



--------------------------------------Assignment 3: Section 1 --------------------------------------
39. Create a github account if you do not have already.
=> Done
40. Login on into github account.
=> Done
41. Create new public repository ‘freshersbatch-oct16’.
=> Done
42. Commit & push any sample file to this repository under ‘Assignments’ directory.
=> git remote add origin https://github.com/satyamdeb12/freshersbatch-oct16
=> git push origin master

--------------------------------------Assignment 3: Section 2 --------------------------------------
1. One developer from project team will create eclipse projects ‘SampleProj’ & add sample
source code files. Then commit all files through eclipse GIT plugin.
2. Collaborate other team members with your github account so that they can also modify
the committed files.
3. Other developers from same team will checkout all files from remote repository. This
might get conflicts since certain files fail to merge. In such case, merge it manually.
4. Commit & push the ‘SampleProj’ project.